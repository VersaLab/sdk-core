{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\r\n  SCROLL_SEPOLIA = 534351,\r\n  POLYGON_MUMBAI = 80001,\r\n  ARBITRUM_GOERLI = 421613,\r\n  OPTIMISM_GOERLI = 420,\r\n  BASE_GOERLI = 84531,\r\n\r\n  SCROLL = 534352,\r\n  POLYGON = 137,\r\n  ARBITRUM_ONE = 42161,\r\n  OPTIMISM = 10,\r\n  BASE = 8453,\r\n\r\n  MAINNET = 1,\r\n  GOERLI = 5,\r\n  SEPOLIA = 11155111,\r\n  CELO = 42220,\r\n  CELO_ALFAJORES = 44787,\r\n  GNOSIS = 100,\r\n  MOONBEAM = 1284,\r\n  BNB = 56,\r\n  AVALANCHE = 43114,\r\n  SCROLL_ALPHA = 534353\r\n}\r\n\r\nexport const SUPPORTED_CHAINS = [\r\n  ChainId.SCROLL_SEPOLIA,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.ARBITRUM_GOERLI,\r\n  ChainId.OPTIMISM_GOERLI,\r\n  ChainId.BASE_GOERLI,\r\n\r\n  ChainId.SCROLL,\r\n  ChainId.POLYGON,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.OPTIMISM,\r\n  ChainId.BASE,\r\n\r\n  ChainId.MAINNET,\r\n  ChainId.GOERLI,\r\n  ChainId.SEPOLIA,\r\n  ChainId.CELO_ALFAJORES,\r\n  ChainId.CELO,\r\n  ChainId.BNB,\r\n  ChainId.AVALANCHE,\r\n  ChainId.SCROLL_ALPHA\r\n] as const\r\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\r\n\r\nexport enum NativeCurrencyName {\r\n  // Strings match input for CLI\r\n  ETHER = 'ETH',\r\n  MATIC = 'MATIC',\r\n  CELO = 'CELO',\r\n  GNOSIS = 'XDAI',\r\n  MOONBEAM = 'GLMR',\r\n  BNB = 'BNB',\r\n  AVAX = 'AVAX'\r\n}\r\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\r\n\r\ntype AddressMap = { [chainId: number]: string }\r\n\r\ntype ChainAddresses = {\r\n  v3CoreFactoryAddress: string\r\n  multicallAddress: string\r\n  quoterAddress: string\r\n  v3MigratorAddress?: string\r\n  nonfungiblePositionManagerAddress?: string\r\n  tickLensAddress?: string\r\n  swapRouter02Address?: string\r\n  v1MixedRouteQuoterAddress?: string\r\n}\r\n\r\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\r\n\r\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\r\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = address\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\r\n  ChainId.POLYGON,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.OPTIMISM,\r\n\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.SEPOLIA\r\n])\r\n\r\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\r\n\r\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS, [\r\n  ChainId.POLYGON,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.OPTIMISM,\r\n  ChainId.BASE,\r\n\r\n  ChainId.CELO,\r\n  ChainId.BNB,\r\n  ChainId.AVALANCHE\r\n])\r\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\r\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\r\n\r\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\r\nconst DEFAULT_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\r\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\r\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\r\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\r\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\r\n}\r\n\r\nconst SCROLL_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xB856587fe1cbA8600F75F1b1176E44250B11C788',\r\n  multicallAddress: '0x8c181f4B9040F1a2C941EfD3b608712cF86F1957',\r\n  quoterAddress: '0xd5dd33650Ef1DC6D23069aEDC8EAE87b0D3619B2',\r\n  v3MigratorAddress: '0x38E33D067F03a5cDc02C301b2c306cb0414549Bf',\r\n  nonfungiblePositionManagerAddress: '0xbbAd0e891922A8A4a7e9c39d4cc0559117016fec',\r\n  tickLensAddress: '0x9804Da978427a49929f2E6Ea32A9594F03f9296e',\r\n  swapRouter02Address: '0x17AFD0263D6909Ba1F9a8EAC697f76532365Fb95'\r\n}\r\nconst POLYGON_MUMBAI_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\r\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\r\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\r\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\r\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\r\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\r\n  swapRouter02Address: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad'\r\n}\r\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\r\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\r\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\r\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\r\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\r\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\r\n  swapRouter02Address: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad'\r\n}\r\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\r\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\r\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\r\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\r\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\r\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\r\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\r\n}\r\n\r\nconst SCROLL_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x70C62C8b8e801124A4Aa81ce07b637A3e83cb919',\r\n  multicallAddress: '0xC1D2e074C38FdD5CA965000668420C80316F0915',\r\n  quoterAddress: '0x2566e082Cb1656d22BCbe5644F5b997D194b5299',\r\n  v3MigratorAddress: '0xF00577B5Dd0DA227298E954Ed11356F264Cf93d4',\r\n  nonfungiblePositionManagerAddress: '0xB39002E4033b162fAc607fc3471E205FA2aE5967',\r\n  tickLensAddress: '0x85780e12e90D2a684eB8E7404c985b5B5c8ce7E9',\r\n  swapRouter02Address: '0xfc30937f5cDe93Df8d48aCAF7e6f5D8D8A31F636'\r\n}\r\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\r\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\r\n}\r\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\nconst BASE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\r\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\r\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\r\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\r\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\r\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\r\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\r\n}\r\n\r\nconst MAINNET_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\r\n}\r\nconst GOERLI_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\r\n}\r\nconst CELO_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\r\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\r\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\r\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\r\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\r\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\r\n}\r\nconst BNB_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\r\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\r\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\r\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\r\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\r\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\r\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\r\n}\r\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\r\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\r\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\r\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\r\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\r\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'\r\n}\r\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\r\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\r\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\r\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\r\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\r\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\r\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\r\n}\r\nconst SCROLL_ALPHA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x6E7E0d996eF50E289af9BFd93f774C566F014660',\r\n  multicallAddress: '0x2117f703867a2B7E6813c7e5Edd96bf9a8d8eC30',\r\n  quoterAddress: '0xbf1c1FE1e9e900aFd5ba2Eb67480c44266D5eD84',\r\n  v3MigratorAddress: '0x5Db25d2b7dba65c8aA2b16465438Ec44f75b0511',\r\n  nonfungiblePositionManagerAddress: '0xdbb991616CE0E6a0553258bd34bC1478042C03C2',\r\n  tickLensAddress: '0xf39a3f98Bc7e03cB9A8dBF8246B8C66a1A5c025F',\r\n  swapRouter02Address: '0xD9880690bd717189cC3Fbe7B9020F27fae7Ac76F'\r\n}\r\n\r\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\r\n  [ChainId.SCROLL_SEPOLIA]: SCROLL_SEPOLIA_ADDRESSES,\r\n  [ChainId.POLYGON_MUMBAI]: POLYGON_MUMBAI_ADDRESSES,\r\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\r\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\r\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\r\n\r\n  [ChainId.SCROLL]: SCROLL_ADDRESSES,\r\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\r\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\r\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\r\n  [ChainId.BASE]: BASE_ADDRESSES,\r\n\r\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\r\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\r\n  [ChainId.CELO]: CELO_ADDRESSES,\r\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\r\n  [ChainId.BNB]: BNB_ADDRESSES,\r\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\r\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\r\n  [ChainId.SCROLL_ALPHA]: SCROLL_ALPHA_ADDRESSES\r\n}\r\n\r\n/* V3 Contract Addresses */\r\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\r\n    if (v3MigratorAddress) {\r\n      memo[chainId] = v3MigratorAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MULTICALL_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * The oldest V0 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\r\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\r\n)\r\n/**\r\n * The older V1 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\r\n}\r\n/**\r\n * The latest governor bravo that is currently admin of timelock\r\n */\r\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\r\n}\r\n\r\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\r\n}\r\n\r\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\r\n}\r\n\r\nexport const QUOTER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\r\n    if (nonfungiblePositionManagerAddress) {\r\n      memo[chainId] = nonfungiblePositionManagerAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\r\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\r\n}\r\n\r\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\r\n}\r\n\r\nexport const TICK_LENS_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\r\n    if (tickLensAddress) {\r\n      memo[chainId] = tickLensAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\r\n  if (v1MixedRouteQuoterAddress) {\r\n    memo[chainId] = v1MixedRouteQuoterAddress\r\n  }\r\n  return memo\r\n}, {})\r\n\r\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\r\n  if (\r\n    chainId == ChainId.SCROLL_SEPOLIA ||\r\n    chainId == ChainId.ARBITRUM_GOERLI ||\r\n    chainId == ChainId.OPTIMISM_GOERLI ||\r\n    chainId == ChainId.BASE_GOERLI ||\r\n    chainId == ChainId.SCROLL ||\r\n    chainId == ChainId.BASE ||\r\n    chainId == ChainId.BNB ||\r\n    chainId == ChainId.SCROLL_ALPHA\r\n  ) {\r\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\r\n  }\r\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { Currency } from '../currency'\r\nimport { Token } from '../token'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { Token } from './token'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class BaseCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends BaseCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\r\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\r\n\r\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function checkValidAddress(address: string): string {\r\n  if (startsWith0xLen42HexRegex.test(address)) {\r\n    return address\r\n  }\r\n\r\n  throw new Error(`${address} is not a valid address.`)\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport invariant from 'tiny-invariant'\r\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  /**\r\n   * The contract address on the chain on which this token lives\r\n   */\r\n  public readonly address: string\r\n\r\n  /**\r\n   * Relevant for fee-on-transfer (FOT) token taxes,\r\n   * Not every ERC20 token is FOT token, so this field is optional\r\n   */\r\n  public readonly buyFeeBps?: BigNumber\r\n  public readonly sellFeeBps?: BigNumber\r\n\r\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\r\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\r\n   */\r\n  public constructor(\r\n    chainId: number,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    bypassChecksum?: boolean,\r\n    buyFeeBps?: BigNumber,\r\n    sellFeeBps?: BigNumber\r\n  ) {\r\n    super(chainId, decimals, symbol, name)\r\n    if (bypassChecksum) {\r\n      this.address = checkValidAddress(address)\r\n    } else {\r\n      this.address = validateAndParseAddress(address)\r\n    }\r\n    if (buyFeeBps) {\r\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    if (sellFeeBps) {\r\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    this.buyFeeBps = buyFeeBps\r\n    this.sellFeeBps = sellFeeBps\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n}\r\n","import { Token } from './token'\r\n\r\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\r\nexport const WETH9: { [chainId: number]: Token } = {\r\n  [534351]: new Token(534351, '0x5300000000000000000000000000000000000004', 18, 'WETH', 'Wrapped Ether'),\r\n  [80001]: new Token(80001, '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889', 18, 'WMATIC', 'Wrapped Matic'),\r\n  [421613]: new Token(421613, '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3', 18, 'WETH', 'Wrapped Ether'),\r\n  [420]: new Token(420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [84531]: new Token(84531, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [534352]: new Token(534352, '0x5300000000000000000000000000000000000004', 18, 'WETH', 'Wrapped Ether'),\r\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\r\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\r\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\r\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\r\n  [534353]: new Token(534353, '0xa1EA0B2354F5A344110af2b6AD68e75545009a03', 18, 'WETH', 'Wrapped Ether')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { NativeCurrency } from './nativeCurrency'\r\nimport { Token } from './token'\r\nimport { WETH9 } from './weth9'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n"],"names":["ChainId","SUPPORTED_CHAINS","SCROLL_SEPOLIA","POLYGON_MUMBAI","ARBITRUM_GOERLI","OPTIMISM_GOERLI","BASE_GOERLI","SCROLL","POLYGON","ARBITRUM_ONE","OPTIMISM","BASE","MAINNET","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","SCROLL_ALPHA","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","SCROLL_SEPOLIA_ADDRESSES","tickLensAddress","swapRouter02Address","POLYGON_MUMBAI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","OPTIMISM_GOERLI_ADDRESSES","BASE_GOERLI_ADDRESSES","SCROLL_ADDRESSES","POLYGON_ADDRESSES","ARBITRUM_ONE_ADDRESSES","_extends","OPTIMISM_ADDRESSES","BASE_ADDRESSES","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","SCROLL_ALPHA_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","_WETH","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}